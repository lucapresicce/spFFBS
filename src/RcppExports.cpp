// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// sample_index
arma::uvec sample_index(const int& size, const int& length, const arma::vec& p);
RcppExport SEXP _spFFBS_sample_index(SEXP sizeSEXP, SEXP lengthSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< const int& >::type length(lengthSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_index(size, length, p));
    return rcpp_result_gen;
END_RCPP
}
// forward_filter
List forward_filter(const arma::mat& Y, const arma::mat& G, const arma::mat& P, const arma::mat& V, const arma::mat& W, const arma::mat& m, const arma::mat& C, const double& nu, const arma::mat& Psi);
RcppExport SEXP _spFFBS_forward_filter(SEXP YSEXP, SEXP GSEXP, SEXP PSEXP, SEXP VSEXP, SEXP WSEXP, SEXP mSEXP, SEXP CSEXP, SEXP nuSEXP, SEXP PsiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type G(GSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type P(PSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type V(VSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type m(mSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type C(CSEXP);
    Rcpp::traits::input_parameter< const double& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Psi(PsiSEXP);
    rcpp_result_gen = Rcpp::wrap(forward_filter(Y, G, P, V, W, m, C, nu, Psi));
    return rcpp_result_gen;
END_RCPP
}
// forward_filter_T
List forward_filter_T(const arma::cube& Y, const arma::mat& G, const arma::mat& P, const arma::mat& V, const arma::mat& W, List const& prior);
RcppExport SEXP _spFFBS_forward_filter_T(SEXP YSEXP, SEXP GSEXP, SEXP PSEXP, SEXP VSEXP, SEXP WSEXP, SEXP priorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type G(GSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type P(PSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type V(VSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type W(WSEXP);
    Rcpp::traits::input_parameter< List const& >::type prior(priorSEXP);
    rcpp_result_gen = Rcpp::wrap(forward_filter_T(Y, G, P, V, W, prior));
    return rcpp_result_gen;
END_RCPP
}
// backward_sample
arma::cube backward_sample(const arma::mat& G, const arma::mat& P, const arma::mat& V, const arma::mat& W, const List& ForwFilt, const arma::cube& ThetaSmp, const arma::cube& SigmaSmp, const int& t, const int& L);
RcppExport SEXP _spFFBS_backward_sample(SEXP GSEXP, SEXP PSEXP, SEXP VSEXP, SEXP WSEXP, SEXP ForwFiltSEXP, SEXP ThetaSmpSEXP, SEXP SigmaSmpSEXP, SEXP tSEXP, SEXP LSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type G(GSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type P(PSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type V(VSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const List& >::type ForwFilt(ForwFiltSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type ThetaSmp(ThetaSmpSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type SigmaSmp(SigmaSmpSEXP);
    Rcpp::traits::input_parameter< const int& >::type t(tSEXP);
    Rcpp::traits::input_parameter< const int& >::type L(LSEXP);
    rcpp_result_gen = Rcpp::wrap(backward_sample(G, P, V, W, ForwFilt, ThetaSmp, SigmaSmp, t, L));
    return rcpp_result_gen;
END_RCPP
}
// backward_sample_T
List backward_sample_T(const arma::mat& G, const arma::mat& P, const arma::mat& V, const arma::mat& W, const List& ForwFilt, const int& L);
RcppExport SEXP _spFFBS_backward_sample_T(SEXP GSEXP, SEXP PSEXP, SEXP VSEXP, SEXP WSEXP, SEXP ForwFiltSEXP, SEXP LSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type G(GSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type P(PSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type V(VSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const List& >::type ForwFilt(ForwFiltSEXP);
    Rcpp::traits::input_parameter< const int& >::type L(LSEXP);
    rcpp_result_gen = Rcpp::wrap(backward_sample_T(G, P, V, W, ForwFilt, L));
    return rcpp_result_gen;
END_RCPP
}
// weighted_backward_sample
arma::cube weighted_backward_sample(const arma::mat& G, const arma::mat& D, const List& FF_t, const arma::cube& ThetaSmp, const arma::cube& SigmaSmp, const arma::mat& par_grid, const arma::vec& weights);
RcppExport SEXP _spFFBS_weighted_backward_sample(SEXP GSEXP, SEXP DSEXP, SEXP FF_tSEXP, SEXP ThetaSmpSEXP, SEXP SigmaSmpSEXP, SEXP par_gridSEXP, SEXP weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type G(GSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type D(DSEXP);
    Rcpp::traits::input_parameter< const List& >::type FF_t(FF_tSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type ThetaSmp(ThetaSmpSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type SigmaSmp(SigmaSmpSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type par_grid(par_gridSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weights(weightsSEXP);
    rcpp_result_gen = Rcpp::wrap(weighted_backward_sample(G, D, FF_t, ThetaSmp, SigmaSmp, par_grid, weights));
    return rcpp_result_gen;
END_RCPP
}
// spBS
List spBS(const arma::mat& G, const arma::mat& D, const List& ForwFilt, const int& L, const arma::mat& par_grid, const arma::vec& weights);
RcppExport SEXP _spFFBS_spBS(SEXP GSEXP, SEXP DSEXP, SEXP ForwFiltSEXP, SEXP LSEXP, SEXP par_gridSEXP, SEXP weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type G(GSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type D(DSEXP);
    Rcpp::traits::input_parameter< const List& >::type ForwFilt(ForwFiltSEXP);
    Rcpp::traits::input_parameter< const int& >::type L(LSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type par_grid(par_gridSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weights(weightsSEXP);
    rcpp_result_gen = Rcpp::wrap(spBS(G, D, ForwFilt, L, par_grid, weights));
    return rcpp_result_gen;
END_RCPP
}
// forward_filter
List forward_filter(const arma::mat& Y, const arma::mat& G, const arma::mat& P, const arma::mat& V, const arma::mat& W, const arma::mat& m, const arma::mat& C, const double& nu, const arma::mat& Psi);
RcppExport SEXP _spFFBS_forward_filter(SEXP YSEXP, SEXP GSEXP, SEXP PSEXP, SEXP VSEXP, SEXP WSEXP, SEXP mSEXP, SEXP CSEXP, SEXP nuSEXP, SEXP PsiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type G(GSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type P(PSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type V(VSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type m(mSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type C(CSEXP);
    Rcpp::traits::input_parameter< const double& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Psi(PsiSEXP);
    rcpp_result_gen = Rcpp::wrap(forward_filter(Y, G, P, V, W, m, C, nu, Psi));
    return rcpp_result_gen;
END_RCPP
}
// parallel_forward_filter
List parallel_forward_filter(const arma::mat& Y, const arma::mat& G, const arma::mat& P, const arma::mat& D, const arma::mat& par_grid, List FF_prec, int J, int p, int n, int num_threads);
RcppExport SEXP _spFFBS_parallel_forward_filter(SEXP YSEXP, SEXP GSEXP, SEXP PSEXP, SEXP DSEXP, SEXP par_gridSEXP, SEXP FF_precSEXP, SEXP JSEXP, SEXP pSEXP, SEXP nSEXP, SEXP num_threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type G(GSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type P(PSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type D(DSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type par_grid(par_gridSEXP);
    Rcpp::traits::input_parameter< List >::type FF_prec(FF_precSEXP);
    Rcpp::traits::input_parameter< int >::type J(JSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type num_threads(num_threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(parallel_forward_filter(Y, G, P, D, par_grid, FF_prec, J, p, n, num_threads));
    return rcpp_result_gen;
END_RCPP
}
// lmvgamma
double lmvgamma(double x, int p);
RcppExport SEXP _spFFBS_lmvgamma(SEXP xSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(lmvgamma(x, p));
    return rcpp_result_gen;
END_RCPP
}
// log_matrix_t_density
double log_matrix_t_density(const arma::mat& X, const arma::mat& M, const arma::mat& U, const arma::mat& V, double nu);
RcppExport SEXP _spFFBS_log_matrix_t_density(SEXP XSEXP, SEXP MSEXP, SEXP USEXP, SEXP VSEXP, SEXP nuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type U(USEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type V(VSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    rcpp_result_gen = Rcpp::wrap(log_matrix_t_density(X, M, U, V, nu));
    return rcpp_result_gen;
END_RCPP
}
// parallel_matrix_t_evaluations
arma::mat parallel_matrix_t_evaluations(const arma::cube& Y, const Rcpp::List& out_J, int t, int J, int n, int num_threads);
RcppExport SEXP _spFFBS_parallel_matrix_t_evaluations(SEXP YSEXP, SEXP out_JSEXP, SEXP tSEXP, SEXP JSEXP, SEXP nSEXP, SEXP num_threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type out_J(out_JSEXP);
    Rcpp::traits::input_parameter< int >::type t(tSEXP);
    Rcpp::traits::input_parameter< int >::type J(JSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type num_threads(num_threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(parallel_matrix_t_evaluations(Y, out_J, t, J, n, num_threads));
    return rcpp_result_gen;
END_RCPP
}
// unified_parallel_function
List unified_parallel_function(const arma::mat& Y, const arma::mat& G, const arma::mat& P, const arma::mat& D, const arma::mat& par_grid, List FF_prec, int J, int p, int n, int num_threads);
RcppExport SEXP _spFFBS_unified_parallel_function(SEXP YSEXP, SEXP GSEXP, SEXP PSEXP, SEXP DSEXP, SEXP par_gridSEXP, SEXP FF_precSEXP, SEXP JSEXP, SEXP pSEXP, SEXP nSEXP, SEXP num_threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type G(GSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type P(PSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type D(DSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type par_grid(par_gridSEXP);
    Rcpp::traits::input_parameter< List >::type FF_prec(FF_precSEXP);
    Rcpp::traits::input_parameter< int >::type J(JSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type num_threads(num_threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(unified_parallel_function(Y, G, P, D, par_grid, FF_prec, J, p, n, num_threads));
    return rcpp_result_gen;
END_RCPP
}
// spFF
List spFF(const arma::cube& Y, const arma::mat& G, const arma::mat& P, const arma::mat& D, const arma::mat& par_grid, List const& prior, int num_threads);
RcppExport SEXP _spFFBS_spFF(SEXP YSEXP, SEXP GSEXP, SEXP PSEXP, SEXP DSEXP, SEXP par_gridSEXP, SEXP priorSEXP, SEXP num_threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type G(GSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type P(PSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type D(DSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type par_grid(par_gridSEXP);
    Rcpp::traits::input_parameter< List const& >::type prior(priorSEXP);
    Rcpp::traits::input_parameter< int >::type num_threads(num_threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(spFF(Y, G, P, D, par_grid, prior, num_threads));
    return rcpp_result_gen;
END_RCPP
}
// forward_filter
List forward_filter(const arma::mat& Y, const arma::mat& G, const arma::mat& P, const arma::mat& V, const arma::mat& W, const arma::mat& m, const arma::mat& C, const double& nu, const arma::mat& Psi);
RcppExport SEXP _spFFBS_forward_filter(SEXP YSEXP, SEXP GSEXP, SEXP PSEXP, SEXP VSEXP, SEXP WSEXP, SEXP mSEXP, SEXP CSEXP, SEXP nuSEXP, SEXP PsiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type G(GSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type P(PSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type V(VSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type m(mSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type C(CSEXP);
    Rcpp::traits::input_parameter< const double& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Psi(PsiSEXP);
    rcpp_result_gen = Rcpp::wrap(forward_filter(Y, G, P, V, W, m, C, nu, Psi));
    return rcpp_result_gen;
END_RCPP
}
// forward_filter_T
List forward_filter_T(const arma::cube& Y, const arma::mat& G, const arma::mat& P, const arma::mat& V, const arma::mat& W, List const& prior);
RcppExport SEXP _spFFBS_forward_filter_T(SEXP YSEXP, SEXP GSEXP, SEXP PSEXP, SEXP VSEXP, SEXP WSEXP, SEXP priorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type G(GSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type P(PSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type V(VSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type W(WSEXP);
    Rcpp::traits::input_parameter< List const& >::type prior(priorSEXP);
    rcpp_result_gen = Rcpp::wrap(forward_filter_T(Y, G, P, V, W, prior));
    return rcpp_result_gen;
END_RCPP
}
// backward_sample
arma::cube backward_sample(const arma::mat& G, const arma::mat& P, const arma::mat& V, const arma::mat& W, const List& ForwFilt, const arma::cube& ThetaSmp, const arma::cube& SigmaSmp, const int& t, const int& L);
RcppExport SEXP _spFFBS_backward_sample(SEXP GSEXP, SEXP PSEXP, SEXP VSEXP, SEXP WSEXP, SEXP ForwFiltSEXP, SEXP ThetaSmpSEXP, SEXP SigmaSmpSEXP, SEXP tSEXP, SEXP LSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type G(GSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type P(PSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type V(VSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const List& >::type ForwFilt(ForwFiltSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type ThetaSmp(ThetaSmpSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type SigmaSmp(SigmaSmpSEXP);
    Rcpp::traits::input_parameter< const int& >::type t(tSEXP);
    Rcpp::traits::input_parameter< const int& >::type L(LSEXP);
    rcpp_result_gen = Rcpp::wrap(backward_sample(G, P, V, W, ForwFilt, ThetaSmp, SigmaSmp, t, L));
    return rcpp_result_gen;
END_RCPP
}
// backward_sample_T
List backward_sample_T(const arma::mat& G, const arma::mat& P, const arma::mat& V, const arma::mat& W, const List& ForwFilt, const int& L);
RcppExport SEXP _spFFBS_backward_sample_T(SEXP GSEXP, SEXP PSEXP, SEXP VSEXP, SEXP WSEXP, SEXP ForwFiltSEXP, SEXP LSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type G(GSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type P(PSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type V(VSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const List& >::type ForwFilt(ForwFiltSEXP);
    Rcpp::traits::input_parameter< const int& >::type L(LSEXP);
    rcpp_result_gen = Rcpp::wrap(backward_sample_T(G, P, V, W, ForwFilt, L));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_spFFBS_sample_index", (DL_FUNC) &_spFFBS_sample_index, 3},
    {"_spFFBS_forward_filter", (DL_FUNC) &_spFFBS_forward_filter, 9},
    {"_spFFBS_forward_filter_T", (DL_FUNC) &_spFFBS_forward_filter_T, 6},
    {"_spFFBS_backward_sample", (DL_FUNC) &_spFFBS_backward_sample, 9},
    {"_spFFBS_backward_sample_T", (DL_FUNC) &_spFFBS_backward_sample_T, 6},
    {"_spFFBS_weighted_backward_sample", (DL_FUNC) &_spFFBS_weighted_backward_sample, 7},
    {"_spFFBS_spBS", (DL_FUNC) &_spFFBS_spBS, 6},
    {"_spFFBS_forward_filter", (DL_FUNC) &_spFFBS_forward_filter, 9},
    {"_spFFBS_parallel_forward_filter", (DL_FUNC) &_spFFBS_parallel_forward_filter, 10},
    {"_spFFBS_lmvgamma", (DL_FUNC) &_spFFBS_lmvgamma, 2},
    {"_spFFBS_log_matrix_t_density", (DL_FUNC) &_spFFBS_log_matrix_t_density, 5},
    {"_spFFBS_parallel_matrix_t_evaluations", (DL_FUNC) &_spFFBS_parallel_matrix_t_evaluations, 6},
    {"_spFFBS_unified_parallel_function", (DL_FUNC) &_spFFBS_unified_parallel_function, 10},
    {"_spFFBS_spFF", (DL_FUNC) &_spFFBS_spFF, 7},
    {"_spFFBS_forward_filter", (DL_FUNC) &_spFFBS_forward_filter, 9},
    {"_spFFBS_forward_filter_T", (DL_FUNC) &_spFFBS_forward_filter_T, 6},
    {"_spFFBS_backward_sample", (DL_FUNC) &_spFFBS_backward_sample, 9},
    {"_spFFBS_backward_sample_T", (DL_FUNC) &_spFFBS_backward_sample_T, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_spFFBS(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
